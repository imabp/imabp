{"version":3,"sources":["LeftDisplay.js","App.js","serviceWorker.js","index.js"],"names":["Avatar","className","alt","src","this","props","details","Component","UserName","fname","lname","Description","LeftDisplay","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2MAEMA,E,uKAGE,OACI,yBAAKC,UAAU,gBACX,yBAAKC,IAAI,SAAUC,IAAKC,KAAKC,MAAMC,e,GAL9BC,aAUfC,E,uKAEE,IAAMC,EAAML,KAAKC,MAAMC,QAAX,GACNI,EAAMN,KAAKC,MAAMC,QAAX,GACZ,OACG,yBAAKL,UAAU,YACZ,8BAAOQ,EAAP,IAAeC,Q,GANNH,aAWjBI,E,uKAEE,OAAO,yBAAKV,UAAU,QAClB,uBAAGA,UAAU,gBAAgBG,KAAKC,MAAMC,c,GAH1BC,aAsBXK,E,uKATZ,OACU,yBAAKX,UAAU,aACZ,kBAAC,EAAD,CAAQK,QAASF,KAAKC,MAAMC,QAAX,SACjB,kBAAC,EAAD,CAAUA,QAAS,CAAC,GAAKF,KAAKC,MAAMC,QAAX,UAAgC,GAAKF,KAAKC,MAAMC,QAAX,YAC9D,kBAAC,EAAD,CAAaA,QAAQ,wC,GARXC,aCTXM,E,uKALb,OACE,kBAAC,EAAD,CAAaP,QAZX,CACE,UAAY,OACZ,SAAW,MAEX,MAAQ,iCACR,YAAc,qCACd,OAAS,yGACT,OAAS,2BACT,SAAW,uC,GAXDC,aCQEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0765ee29.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Avatar extends Component{\r\n    render(){\r\n        \r\n        return(\r\n            <div className=\"avatar-class\">\r\n                <img alt=\"Avatar\"  src={this.props.details}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nclass UserName extends Component{\r\n    render(){\r\n        const fname=this.props.details[\"fn\"];\r\n        const lname=this.props.details[\"ln\"];\r\n        return(\r\n           <div className=\"username\">\r\n              <span>{fname} {lname}</span>\r\n           </div>\r\n        )\r\n    }\r\n}\r\nclass Description extends Component{\r\n    render(){\r\n        return <div className=\"desc\">\r\n            <p className=\"CODEdecorate\">{this.props.details}</p>\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\nclass LeftDisplay extends Component{\r\n  render()\r\n  {\r\n\r\n   return (\r\n             <div className=\"LeftPanel\">\r\n                <Avatar details={this.props.details['avatar']}/>\r\n                <UserName details={{\"fn\":this.props.details['firstname'],\"ln\":this.props.details['lastname']}} />\r\n                <Description details=\"Computer Science Undergraduate\"/>\r\n            </div>\r\n            )\r\n  }\r\n}  \r\nexport default LeftDisplay;","import React, {Component} from 'react';\nimport LeftDisplay from './LeftDisplay';\n\n\nclass App extends Component {\n  render(){\n    const details=\n      {\n        \"firstname\":\"Abir\",\n        \"lastname\":\"Pal\",\n        \n        \"title\":\"Computer Science Undergraduate\",\n        \"description\":\"Works at Integration of ML and Web\",\n        \"avatar\":\"https://avatars3.githubusercontent.com/u/53480076?s=460&u=182022968da3f6f03777d264eef4a999dd689379&v=4\",\n        \"github\":\"https://github.com/imabp\",\n        \"linkedin\":\"https://linkedin.com/in/imabp\"\n    }\n    \n  return (\n    <LeftDisplay details={details}/>\n    );}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}